namespace ffd::determinant::unit_test{

  auto det2_test =
    [](auto P){
      return std::vector<Real>{-(P[1][0]*P[2][0]) + P[0][0]*P[3][0],
  -(P[1][1]*P[2][0]) - P[1][0]*P[2][1] + P[0][1]*P[3][0] + P[0][0]*P[3][1],
  -(P[1][2]*P[2][0]) - P[1][0]*P[2][2] + P[0][2]*P[3][0] + P[0][0]*P[3][2],
  -(P[1][3]*P[2][0]) - P[1][2]*P[2][1] - P[1][1]*P[2][2] - P[1][0]*P[2][3] + 
   P[0][3]*P[3][0] + P[0][2]*P[3][1] + P[0][1]*P[3][2] + P[0][0]*P[3][3],
  -(P[1][4]*P[2][0]) - P[1][0]*P[2][4] + P[0][4]*P[3][0] + P[0][0]*P[3][4],
  -(P[1][5]*P[2][0]) - P[1][4]*P[2][1] - P[1][1]*P[2][4] - P[1][0]*P[2][5] + 
   P[0][5]*P[3][0] + P[0][4]*P[3][1] + P[0][1]*P[3][4] + P[0][0]*P[3][5],
  -(P[1][6]*P[2][0]) - P[1][4]*P[2][2] - P[1][2]*P[2][4] - P[1][0]*P[2][6] + 
   P[0][6]*P[3][0] + P[0][4]*P[3][2] + P[0][2]*P[3][4] + P[0][0]*P[3][6],
  -(P[1][7]*P[2][0]) - P[1][6]*P[2][1] - P[1][5]*P[2][2] - P[1][4]*P[2][3] - 
   P[1][3]*P[2][4] - P[1][2]*P[2][5] - P[1][1]*P[2][6] - P[1][0]*P[2][7] + 
   P[0][7]*P[3][0] + P[0][6]*P[3][1] + P[0][5]*P[3][2] + P[0][4]*P[3][3] + 
   P[0][3]*P[3][4] + P[0][2]*P[3][5] + P[0][1]*P[3][6] + P[0][0]*P[3][7],
  -(P[1][8]*P[2][0]) - P[1][0]*P[2][8] + P[0][8]*P[3][0] + P[0][0]*P[3][8],
  -(P[1][9]*P[2][0]) - P[1][8]*P[2][1] - P[1][1]*P[2][8] - P[1][0]*P[2][9] + 
   P[0][9]*P[3][0] + P[0][8]*P[3][1] + P[0][1]*P[3][8] + P[0][0]*P[3][9],
  -(P[1][10]*P[2][0]) - P[1][8]*P[2][2] - P[1][2]*P[2][8] - 
   P[1][0]*P[2][10] + P[0][10]*P[3][0] + P[0][8]*P[3][2] + P[0][2]*P[3][8] + 
   P[0][0]*P[3][10],-(P[1][11]*P[2][0]) - P[1][10]*P[2][1] - 
   P[1][9]*P[2][2] - P[1][8]*P[2][3] - P[1][3]*P[2][8] - P[1][2]*P[2][9] - 
   P[1][1]*P[2][10] - P[1][0]*P[2][11] + P[0][11]*P[3][0] + 
   P[0][10]*P[3][1] + P[0][9]*P[3][2] + P[0][8]*P[3][3] + P[0][3]*P[3][8] + 
   P[0][2]*P[3][9] + P[0][1]*P[3][10] + P[0][0]*P[3][11],
  -(P[1][12]*P[2][0]) - P[1][8]*P[2][4] - P[1][4]*P[2][8] - 
   P[1][0]*P[2][12] + P[0][12]*P[3][0] + P[0][8]*P[3][4] + P[0][4]*P[3][8] + 
   P[0][0]*P[3][12],-(P[1][13]*P[2][0]) - P[1][12]*P[2][1] - 
   P[1][9]*P[2][4] - P[1][8]*P[2][5] - P[1][5]*P[2][8] - P[1][4]*P[2][9] - 
   P[1][1]*P[2][12] - P[1][0]*P[2][13] + P[0][13]*P[3][0] + 
   P[0][12]*P[3][1] + P[0][9]*P[3][4] + P[0][8]*P[3][5] + P[0][5]*P[3][8] + 
   P[0][4]*P[3][9] + P[0][1]*P[3][12] + P[0][0]*P[3][13],
  -(P[1][14]*P[2][0]) - P[1][12]*P[2][2] - P[1][10]*P[2][4] - 
   P[1][8]*P[2][6] - P[1][6]*P[2][8] - P[1][4]*P[2][10] - P[1][2]*P[2][12] - 
   P[1][0]*P[2][14] + P[0][14]*P[3][0] + P[0][12]*P[3][2] + 
				 P[0][10]*P[3][4] + P[0][8]*P[3][6] + P[0][6]*P[3][8] + P[0][4]*P[3][10] + 
				 P[0][2]*P[3][12] + P[0][0]*P[3][14],
				 -(P[1][15]*P[2][0]) - P[1][14]*P[2][1] - P[1][13]*P[2][2] - 
				 P[1][12]*P[2][3] - P[1][11]*P[2][4] - P[1][10]*P[2][5] - P[1][9]*P[2][6] - 
				 P[1][8]*P[2][7] - P[1][7]*P[2][8] - P[1][6]*P[2][9] - P[1][5]*P[2][10] - 
				 P[1][4]*P[2][11] - P[1][3]*P[2][12] - P[1][2]*P[2][13] - 
				 P[1][1]*P[2][14] - P[1][0]*P[2][15] + P[0][15]*P[3][0] + 
				 P[0][14]*P[3][1] + P[0][13]*P[3][2] + P[0][12]*P[3][3] + 
				 P[0][11]*P[3][4] + P[0][10]*P[3][5] + P[0][9]*P[3][6] + P[0][8]*P[3][7] + 
				 P[0][7]*P[3][8] + P[0][6]*P[3][9] + P[0][5]*P[3][10] + P[0][4]*P[3][11] + 
				 P[0][3]*P[3][12] + P[0][2]*P[3][13] + P[0][1]*P[3][14] + P[0][0]*P[3][15]};};
  

}//namespace

